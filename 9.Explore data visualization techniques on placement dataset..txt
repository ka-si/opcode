Aim: Explore data visualization techniques on placement dataset.

âœ… THEORY
ðŸ”¹ Common Data Visualization Techniques:
Histograms
Shows the distribution of numerical data.

Good for understanding the frequency of values in a dataset.

Box Plots
Displays the distribution of data through quartiles and highlights outliers.

Great for spotting skewness and variability.

Bar Plots
Used for comparing categorical data.

Can show placement distribution across different categories (e.g., gender, branch, etc.).

Heatmap
Displays correlation between features in a matrix format.

Helps identify which features are highly correlated.

Pair Plot
Shows pairwise relationships between numerical features.

Good for detecting patterns or correlations between variables.

Count Plot
A type of bar plot for categorical data, showing the frequency of each category.

Useful for categorical variables like gender, placement status, etc.

âœ… IMPLEMENTATION STEPS
Load and explore the dataset

Visualize the distribution of key numerical features (e.g., marks, salary)

Create a box plot to examine outliers and distribution

Visualize placement status by categorical features (e.g., gender, branch)

Explore correlations with a heatmap

Examine pairwise relationships using a pair plot

âœ… PSEUDO CODE (Python Style)
python
Copy code
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Step 1: Load the dataset
df = pd.read_csv("placement.csv")

# Step 2: Explore dataset and check missing values
print(df.head())
print(df.isnull().sum())

# Step 3: Visualize the distribution of numerical features
sns.histplot(df['ssc_percentage'], kde=True)
plt.title('Distribution of SSC Percentage')
plt.xlabel('SSC Percentage')
plt.ylabel('Frequency')
plt.show()

sns.histplot(df['hsc_percentage'], kde=True)
plt.title('Distribution of HSC Percentage')
plt.xlabel('HSC Percentage')
plt.ylabel('Frequency')
plt.show()

sns.histplot(df['degree_percentage'], kde=True)
plt.title('Distribution of Degree Percentage')
plt.xlabel('Degree Percentage')
plt.ylabel('Frequency')
plt.show()

sns.histplot(df['etest_percentage'], kde=True)
plt.title('Distribution of E-test Percentage')
plt.xlabel('E-test Percentage')
plt.ylabel('Frequency')
plt.show()

sns.histplot(df['mba_percentage'], kde=True)
plt.title('Distribution of MBA Percentage')
plt.xlabel('MBA Percentage')
plt.ylabel('Frequency')
plt.show()

# Step 4: Create box plots to examine outliers and distributions
plt.figure(figsize=(10, 6))
sns.boxplot(x=df['ssc_percentage'])
plt.title('Box Plot of SSC Percentage')
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(x=df['degree_percentage'])
plt.title('Box Plot of Degree Percentage')
plt.show()

# Step 5: Visualize placement status by categorical features
sns.countplot(data=df, x='gender', hue='status')
plt.title('Placement Status by Gender')
plt.show()

sns.countplot(data=df, x='degree_tyoe', hue='status')
plt.title('Placement Status by Degree Type')
plt.show()

# Step 6: Create a heatmap to show correlations
plt.figure(figsize=(10, 6))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Heatmap of Features')
plt.show()

# Step 7: Create pair plot to examine relationships between key features
sns.pairplot(df[['ssc_percentage', 'hsc_percentage', 'degree_percentage', 'mba_percentage', 'salary']], hue='status')
plt.title('Pair Plot of Features vs Placement Status')
plt.show()
ðŸ”¹ Explanation of the Visualizations:
Histograms:
These histograms show the distribution of numerical features like ssc_percentage, hsc_percentage, etc. This helps us understand how the scores are spread out. For example, the distribution may show that most students have scores clustered around a certain value.

Box Plots:
The box plots give us a visual of how scores like ssc_percentage are distributed, with the interquartile range (IQR), median, and potential outliers.

Count Plots:
These bar charts show the number of students placed vs. not placed, segmented by categories like gender or degree_type. This helps us understand if there are any significant trends or differences in placement based on these categories.

Heatmap:
The heatmap visualizes the correlation matrix of numerical features. We can see which features are strongly correlated (e.g., degree_percentage and mba_percentage). A strong correlation could indicate that students with high degrees also have high MBA percentages, helping us identify patterns.

Pair Plot:
The pair plot is a great way to look at relationships between several numerical features. It plots each feature against every other feature to help us understand how the features relate to one another and whether any of them can be used to predict placement.

-------------------------------------------------------------xxx-------------------------------------------------------------------------

Code : 

# Import required libraries
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# ------------------------------
# 1. LOAD PLACEMENT DATASET
# ------------------------------

url = "https://raw.githubusercontent.com/omairaasim/machine-learning-datasets/main/Placement_Data_Full_Class.csv"

try:
    df = pd.read_csv(url)
    print("âœ… Dataset loaded successfully.")
except:
    df = pd.read_csv("placement.csv")
    print("âœ… Loaded from local file.")

# ------------------------------
# 2. UNIVARIATE VISUALIZATIONS
# ------------------------------

# Histogram - Age Distribution
plt.figure(figsize=(7, 4))
sns.histplot(df['age'], bins=10, kde=True, color='skyblue')
plt.title("Age Distribution of Students")
plt.xlabel("Age")
plt.ylabel("Count")
plt.tight_layout()
plt.show()

# Countplot - Gender
plt.figure(figsize=(6, 4))
sns.countplot(data=df, x='gender', palette='Set2')
plt.title("Gender Distribution")
plt.tight_layout()
plt.show()

# ------------------------------
# 3. BIVARIATE VISUALIZATIONS
# ------------------------------

# Boxplot - Salary vs Placement status
plt.figure(figsize=(8, 5))
sns.boxplot(data=df, x='status', y='salary')
plt.title("Salary Distribution by Placement Status")
plt.tight_layout()
plt.show()

# Barplot - Specialization vs Placement Rate
plt.figure(figsize=(8, 5))
sns.barplot(data=df, x='specialisation', y=df['status'].apply(lambda x: 1 if x == 'Placed' else 0))
plt.title("Placement Rate by Specialization")
plt.ylabel("Placement Rate")
plt.tight_layout()
plt.show()

# ------------------------------
# 4. MULTIVARIATE VISUALIZATIONS
# ------------------------------

# Pairplot - Compare numerical features colored by placement
sns.pairplot(df[['age', 'ssc_p', 'hsc_p', 'degree_p', 'status']], hue='status')
plt.suptitle("Pairwise Plots Colored by Placement", y=1.02)
plt.show()

# Heatmap - Correlation between numeric variables
plt.figure(figsize=(10, 6))
sns.heatmap(df.select_dtypes(include='number').corr(), annot=True, cmap='coolwarm')
plt.title("Correlation Matrix")
plt.tight_layout()
plt.show()

