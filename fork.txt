3.
a. Create a child process using the fork system call.
b. Obtain the process ID of both child and parent by using getpid and getppid system call


//Here is an example code in C for creating a child process using fork system call:
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
    pid_t pid;

    pid = fork(); // create child process

    if (pid == -1) { // error occurred
        printf("Error: Failed to fork\n");
        exit(1);
    } else if (pid == 0) { // child process
        printf("I am the child process with pid %d\n", getpid());
        // child process code here
        exit(0);
    } else { // parent process
        printf("I am the parent process with pid %d\n", getpid());
        // parent process code here
    }

    return 0;
}






//here is an example code in C for obtaining the process ID of both the child and parent using getpid and getppid system calls
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
    pid_t pid;

    pid = fork(); // create child process

    if (pid == -1) { // error occurred
        printf("Error: Failed to fork\n");
        exit(1);
    } else if (pid == 0) { // child process
        printf("I am the child process with pid %d, my parent process is %d\n", getpid(), getppid());
        exit(0);
    } else { // parent process
        printf("I am the parent process with pid %d, my child process is %d\n", getpid(), pid);
    }

    return 0;
}
