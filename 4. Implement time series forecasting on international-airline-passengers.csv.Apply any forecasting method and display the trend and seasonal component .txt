Aim: Implement time series forecasting on international-airline-passengers.csv. Apply any forecasting method and display the trend and seasonal component.

âœ… THEORY
ðŸ”¹ What is Time Series Forecasting?
Time series forecasting is the process of using historical time-stamped data to predict future values. The data points are collected in chronological order â€” like monthly airline passengers.

ðŸ”¹ Components of Time Series
Time series usually has three key components:

Trend: Long-term direction (e.g., increasing passengers over years)

Seasonality: Short-term periodic patterns (e.g., summer or holiday spikes)

Residual / Noise: Irregular random variation

ðŸ”¹ Common Forecasting Methods
Moving Average / Exponential Smoothing

ARIMA (Auto-Regressive Integrated Moving Average)

Holt-Winters Exponential Smoothing (captures trend + seasonality)

Facebook Prophet / LSTM (for advanced forecasting)

ðŸ”¹ Seasonal Decomposition of Time Series
Using statsmodelsâ€™ seasonal_decompose, we can extract:

Trend

Seasonal

Residual

âœ… IMPLEMENTATION STEPS
Load the dataset

Parse dates, set index as datetime

Visualize original data

Decompose the time series

Apply forecasting method (e.g., Holt-Winters)

Plot forecast and components

âœ… PSEUDO CODE (Python Style)
python
Copy code
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.holtwinters import ExponentialSmoothing

# Step 1: Load dataset
df = pd.read_csv("international-airline-passengers.csv")
df.columns = ['Month', 'Passengers']
df['Month'] = pd.to_datetime(df['Month'])
df.set_index('Month', inplace=True)

# Step 2: Plot the original series
df['Passengers'].plot(title='Monthly Airline Passengers', figsize=(10,4))
plt.ylabel("Number of Passengers")
plt.grid()
plt.show()

# Step 3: Decompose the time series
decompose_result = seasonal_decompose(df['Passengers'], model='multiplicative')
decompose_result.plot()
plt.tight_layout()
plt.show()

# Step 4: Apply Holt-Winters method for forecasting
model = ExponentialSmoothing(df['Passengers'], trend='add', seasonal='add', seasonal_periods=12)
fit_model = model.fit()

# Step 5: Forecast next 12 months
forecast = fit_model.forecast(12)

# Step 6: Plot forecast
plt.figure(figsize=(10, 4))
df['Passengers'].plot(label='Original')
forecast.plot(label='Forecast', color='red')
plt.title("Airline Passengers Forecast (Holt-Winters)")
plt.legend()
plt.grid()
plt.show()

-------------------------------xxx-------------------------------------------

code : 

pip install statsmodels matplotlib


# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.arima.model import ARIMA
from datetime import datetime

# ------------------------------
# LOADING DATA
# ------------------------------

# Option 1: Load dataset from URL
url = 'https://raw.githubusercontent.com/jbrownlee/Datasets/master/airline-passengers.csv'
try:
    df_url = pd.read_csv(url)
    print("Loaded data from URL.")
except Exception as e:
    print("Error loading from URL:", e)

# Option 2: Load dataset from local CSV
try:
    df_csv = pd.read_csv('international-airline-passengers.csv')
    print("Loaded data from local CSV.")
except Exception as e:
    print("Error loading from CSV file:", e)

# We'll use the dataset from URL for this example
df = df_url.copy()

# ------------------------------
# PREPROCESSING
# ------------------------------

# Parse 'Month' as datetime and set it as index
df['Month'] = pd.to_datetime(df['Month'])
df.set_index('Month', inplace=True)

# Rename column for simplicity
df.rename(columns={'Passengers': 'Passengers'}, inplace=True)

# ------------------------------
# DECOMPOSING THE TIME SERIES
# ------------------------------

# Decompose the time series to see trend, seasonal, residual
decomposition = seasonal_decompose(df['Passengers'], model='multiplicative', period=12)

# Plot trend, seasonal, residual
decomposition.plot()
plt.suptitle('Time Series Decomposition')
plt.tight_layout()
plt.show()

# ------------------------------
# FORECASTING USING ARIMA
# ------------------------------

# Fit ARIMA model (p,d,q values chosen for example; can be tuned)
model = ARIMA(df['Passengers'], order=(2, 1, 2))  # ARIMA(p=2,d=1,q=2)
model_fit = model.fit()

# Forecast the next 12 months
forecast = model_fit.forecast(steps=12)

# Plot the original series and the forecast
plt.figure(figsize=(10, 5))
plt.plot(df.index, df['Passengers'], label='Original')
forecast_index = pd.date_range(start=df.index[-1] + pd.DateOffset(months=1), periods=12, freq='MS')
plt.plot(forecast_index, forecast, label='Forecast', color='red')
plt.title('Airline Passengers Forecast (ARIMA)')
plt.xlabel('Date')
plt.ylabel('Number of Passengers')
plt.legend()
plt.tight_layout()
plt.show()
