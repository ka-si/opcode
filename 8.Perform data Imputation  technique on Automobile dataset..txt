Aim: Perform data imputation technique on Automobile dataset.

‚úÖ THEORY
üîπ What is Data Imputation?
Imputation is the process of replacing missing or null values in a dataset with substitute values. Instead of deleting rows or columns with missing values, imputation preserves data size and structure.

üîπ Common Imputation Techniques
Technique	Use Case
Mean / Median Imputation	For numerical features (e.g. horsepower)
Mode Imputation	For categorical features (e.g. fuel type)
Forward / Backward Fill	Time series or ordered data
KNN / Regression Imputation	Advanced imputation with relationships
Constant Imputation	Fill with fixed value like 'Unknown'
üîπ Why Impute Instead of Dropping?
Dropping rows can cause data loss

Many ML models can‚Äôt handle missing values

Imputation helps maintain dataset structure

‚úÖ IMPLEMENTATION STEPS
We‚Äôll use the Automobile dataset (from UCI or automobile.csv with common columns like: make, price, horsepower, num-of-doors, etc.)

‚úÖ PSEUDO CODE (Python Style)
python
Copy code
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.impute import SimpleImputer

# Step 1: Load dataset
df = pd.read_csv("automobile.csv")

# Step 2: Replace '?' with np.nan (common in this dataset)
df.replace('?', np.nan, inplace=True)

# Optional: View missing value counts
print("Missing values per column:\n", df.isnull().sum())

# Step 3: Convert numeric columns to proper type
numeric_cols = ['price', 'horsepower', 'peak-rpm']
for col in numeric_cols:
    df[col] = pd.to_numeric(df[col], errors='coerce')

# Step 4: Impute numerical columns using Mean
num_imputer = SimpleImputer(strategy='mean')
df[numeric_cols] = num_imputer.fit_transform(df[numeric_cols])

# Step 5: Impute categorical column using Mode (e.g. 'num-of-doors')
cat_imputer = SimpleImputer(strategy='most_frequent')
df[['num-of-doors']] = cat_imputer.fit_transform(df[['num-of-doors']])

# Step 6: Confirm missing values are handled
print("Remaining missing values:\n", df.isnull().sum())

# Step 7: Optional ‚Äì Visualize imputed distributions
sns.histplot(df['horsepower'], kde=True)
plt.title("Distribution of Horsepower After Imputation")
plt.xlabel("Horsepower")
plt.show()

---------------------------------xx--------------------------------

Code :
 
# Import necessary libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# ------------------------------
# 1. LOAD AUTOMOBILE DATASET
# ------------------------------

# Load from URL (commonly used automobile dataset)
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/autos/imports-85.data"

columns = ['symboling', 'normalized-losses', 'make', 'fuel-type', 'aspiration', 'num-of-doors',
           'body-style', 'drive-wheels', 'engine-location', 'wheel-base', 'length', 'width',
           'height', 'curb-weight', 'engine-type', 'num-of-cylinders', 'engine-size',
           'fuel-system', 'bore', 'stroke', 'compression-ratio', 'horsepower', 'peak-rpm',
           'city-mpg', 'highway-mpg', 'price']

# Load the dataset
df = pd.read_csv(url, names=columns)

# Replace "?" with NaN
df.replace("?", np.nan, inplace=True)

print("‚úÖ Data loaded. Shape:", df.shape)
print("\nüîç Missing values before imputation:\n", df.isnull().sum())

# ------------------------------
# 2. DATA TYPE CONVERSION
# ------------------------------

# Convert numeric columns to proper dtypes
numeric_cols = ['normalized-losses', 'bore', 'stroke', 'horsepower', 'peak-rpm', 'price']
df[numeric_cols] = df[numeric_cols].astype(float)

# ------------------------------
# 3. IMPUTATION TECHNIQUES
# ------------------------------

# Impute numeric columns using median
for col in numeric_cols:
    df[col].fillna(df[col].median(), inplace=True)

# Impute categorical columns using mode
cat_cols = ['num-of-doors']
for col in cat_cols:
    df[col].fillna(df[col].mode()[0], inplace=True)

# ------------------------------
# 4. RESULTS AFTER IMPUTATION
# ------------------------------

print("\n‚úÖ Missing values after imputation:\n", df.isnull().sum())

# ------------------------------
# 5. OPTIONAL: VISUALIZE IMPUTED COLUMN
# ------------------------------

plt.figure(figsize=(8, 5))
sns.histplot(df['horsepower'], bins=20, kde=True)
plt.title("Distribution of Horsepower After Imputation")
plt.xlabel("Horsepower")
plt.show()
