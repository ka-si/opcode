To perform univariate analysis on the Diabetes dataset, we need to compute the following statistical measures:

Mean: The average value of the variable.

Median: The middle value when the data is sorted.

Variance: A measure of the spread of data points.

Standard Deviation: The square root of variance, providing the average distance of data points from the mean.

Skewness: A measure of the asymmetry of the data distribution.

Kurtosis: A measure of the "tailedness" of the data distribution (how extreme the tails are).

Let's break down the steps and implement these measures on the Diabetes dataset (commonly available as the Pima Indians Diabetes dataset).

Steps for Univariate Analysis:
Load the Diabetes dataset.

Compute each of the required statistical measures (mean, median, variance, standard deviation, skewness, kurtosis).

Display the results.

Python Code for Univariate Analysis on the Diabetes Dataset:
python
Copy code
import pandas as pd
import numpy as np
import scipy.stats as stats

# Step 1: Load the Diabetes dataset
# Replace this path with your dataset path
df = pd.read_csv('diabetes.csv')  # Example: diabetes dataset file

# Step 2: Select the relevant numerical columns (excluding target variable if needed)
# Assuming the dataset has columns like 'Pregnancies', 'Glucose', 'BloodPressure', etc.
numerical_columns = df.select_dtypes(include=[np.number]).columns

# Step 3: Univariate Analysis for each numerical column
for column in numerical_columns:
    print(f"Analysis for {column}:")
    
    # Mean
    mean_value = df[column].mean()
    print(f"Mean: {mean_value}")
    
    # Median
    median_value = df[column].median()
    print(f"Median: {median_value}")
    
    # Variance
    variance_value = df[column].var()
    print(f"Variance: {variance_value}")
    
    # Standard Deviation
    std_dev_value = df[column].std()
    print(f"Standard Deviation: {std_dev_value}")
    
    # Skewness
    skewness_value = stats.skew(df[column].dropna())  # Drop NaN values if any
    print(f"Skewness: {skewness_value}")
    
    # Kurtosis
    kurtosis_value = stats.kurtosis(df[column].dropna())  # Drop NaN values if any
    print(f"Kurtosis: {kurtosis_value}")
    
    print("\n" + "-"*50 + "\n")

Explanation of the Code:
Load the Dataset:

The dataset is loaded using pd.read_csv(). Ensure that the file path is correctly specified.

Select Numerical Columns:

We use df.select_dtypes(include=[np.number]) to extract the numerical columns from the dataset.

Univariate Analysis:

For each numerical column, we compute the following statistical measures:

Mean: df[column].mean()

Median: df[column].median()

Variance: df[column].var()

Standard Deviation: df[column].std()

Skewness: stats.skew(df[column].dropna()), where dropna() ensures that missing values are ignored.

Kurtosis: stats.kurtosis(df[column].dropna())

Display Results:

For each column, we print the values of the statistical measures calculated above.

Expected Results:
After running the code, you will see output for each numerical feature in the dataset like Pregnancies, Glucose, BloodPressure, SkinThickness, etc. For each feature, the following statistics will be printed:

Mean: The average value of the feature.

Median: The middle value of the feature when sorted.

Variance: The variability or spread of the data points around the mean.

Standard Deviation: A measure of the spread of data points around the mean.

Skewness: If the skewness is positive, the data is skewed to the right (long tail on the right). If negative, it is skewed to the left (long tail on the left).

Kurtosis: Positive kurtosis indicates heavy tails, while negative kurtosis indicates light tails.

Example Output (For a typical dataset like Pima Indians Diabetes Dataset):
yaml
Copy code
Analysis for Pregnancies:
Mean: 3.845051
Median: 3.0
Variance: 11.243843
Standard Deviation: 3.354888
Skewness: 0.900348
Kurtosis: -0.110929

--------------------------------------------------

Analysis for Glucose:
Mean: 120.894531
Median: 117.0
Variance: 542.984035
Standard Deviation: 23.296544
Skewness: 0.173748
Kurtosis: -0.788154

--------------------------------------------------

Analysis for BloodPressure:
Mean: 69.105468
Median: 70.0
Variance: 46.426507
Standard Deviation: 6.814106
Skewness: -0.116528
Kurtosis: -0.879205

--------------------------------------------------
Interpretation:
Mean: The mean provides an average measure of the data. For instance, the average glucose level is 120.89.

Median: The median represents the middle value of the data. If the mean is close to the median, the distribution is roughly symmetric.

Variance and Standard Deviation:

A high variance or standard deviation indicates more spread in the data. For example, a higher standard deviation for Glucose suggests greater variability in glucose levels among individuals.

Skewness:

Skewness near 0 indicates a symmetrical distribution. Positive skewness (e.g., for Pregnancies) means that the right tail of the distribution is longer.

Kurtosis:

Positive kurtosis values suggest a distribution with heavier tails, indicating that there are more extreme values in the data. Negative kurtosis would imply fewer extreme values than a normal distribution.

----------------------------------------------xxx-------------------------------------------------------------------

Code :

# Import required libraries
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# ------------------------------
# 1. LOAD DIABETES DATASET
# ------------------------------

# URL of the dataset (or load from local if needed)
url = "https://raw.githubusercontent.com/plotly/datasets/master/diabetes.csv"

try:
    df = pd.read_csv(url)
    print("âœ… Diabetes dataset loaded from URL.")
except:
    df = pd.read_csv("diabetes.csv")  # replace with your path if loading locally
    print("âœ… Diabetes dataset loaded from local file.")

# Display first few rows
print("\nðŸ“„ First 5 rows of the dataset:")
print(df.head())

# ------------------------------
# 2. UNIVARIATE ANALYSIS STATISTICS
# ------------------------------

# List of numerical columns
numerical_cols = df.select_dtypes(include='number').columns

# Loop through each numerical column and print stats
for col in numerical_cols:
    print(f"\nðŸ“Š Analysis for column: {col}")
    print(f"Mean: {df[col].mean():.2f}")
    print(f"Median: {df[col].median():.2f}")
    print(f"Variance: {df[col].var():.2f}")
    print(f"Standard Deviation: {df[col].std():.2f}")
    print(f"Skewness: {df[col].skew():.2f}")
    print(f"Kurtosis: {df[col].kurt():.2f}")

# ------------------------------
# 3. OPTIONAL: VISUALIZE DISTRIBUTIONS
# ------------------------------

# Plot histogram and KDE for each numerical feature
for col in numerical_cols:
    plt.figure(figsize=(7, 4))
    sns.histplot(df[col], kde=True, bins=30, color='teal')
    plt.title(f"Distribution of {col}")
    plt.xlabel(col)
    plt.ylabel("Frequency")
    plt.tight_layout()
    plt.show()
