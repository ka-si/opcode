Aim: Implement and explore performance evaluation metrics for housing dataset.

âœ… THEORY
ðŸ”¹ Regression vs Classification Metrics
Since housing datasets typically involve predicting continuous values (like house prices), regression metrics are used.

ðŸ”¹ Common Regression Metrics:
Mean Absolute Error (MAE)
Measures average absolute difference between predicted and actual values.

Mean Squared Error (MSE)
Penalizes larger errors more than MAE.

Root Mean Squared Error (RMSE)
Square root of MSE. Easier to interpret because it's in the same units as the target.
â€‹
 
RÂ² Score (Coefficient of Determination)
Represents proportion of variance explained by the model.

R 
2
 =1âˆ’ 
SS 
tot
/â€‹
SS 
res
â€‹â€‹
 
RÂ² close to 1 indicates a good model.

âœ… IMPLEMENTATION STEPS
Weâ€™ll use Scikit-learn and the California Housing dataset (or load your CSV if you have one).

âœ… PSEUDO CODE (Python Style)
python
Copy code
from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import numpy as np
import matplotlib.pyplot as plt

# Step 1: Load the housing dataset
data = fetch_california_housing()
X = data.data
y = data.target

# Step 2: Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Step 3: Train a regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Step 4: Make predictions
y_pred = model.predict(X_test)

# Step 5: Evaluate using regression metrics
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print("Mean Absolute Error (MAE):", mae)
print("Mean Squared Error (MSE):", mse)
print("Root Mean Squared Error (RMSE):", rmse)
print("RÂ² Score:", r2)

# Step 6: Visualize Actual vs Predicted
plt.scatter(y_test, y_pred, alpha=0.5, color='teal')
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual vs Predicted Prices")
plt.grid(True)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red')  # perfect prediction line
plt.show()

--------------------------xxx---------------------------------

Code : 
# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# ------------------------------
# 1. LOAD HOUSING DATASET
# ------------------------------

# We'll use the California Housing dataset as Boston is deprecated
from sklearn.datasets import fetch_california_housing

housing = fetch_california_housing()
df = pd.DataFrame(housing.data, columns=housing.feature_names)
df['MedHouseVal'] = housing.target  # Target column

print("âœ… Data loaded. Shape:", df.shape)
print(df.head())

# ------------------------------
# 2. EXPLORATORY PLOT
# ------------------------------

sns.scatterplot(x=df['AveRooms'], y=df['MedHouseVal'])
plt.title('House Value vs Average Number of Rooms')
plt.xlabel('Average Rooms per Household')
plt.ylabel('Median House Value')
plt.show()

# ------------------------------
# 3. TRAIN-TEST SPLIT
# ------------------------------

X = df.drop('MedHouseVal', axis=1)
y = df['MedHouseVal']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ------------------------------
# 4. MODEL TRAINING
# ------------------------------

model = LinearRegression()
model.fit(X_train, y_train)
print("\nâœ… Model trained.")

# ------------------------------
# 5. PREDICTIONS & EVALUATION
# ------------------------------

y_pred = model.predict(X_test)

# Evaluation metrics
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

# Print evaluation metrics
print("\nðŸ“Š Performance Metrics:")
print("Mean Absolute Error (MAE):", round(mae, 3))
print("Mean Squared Error (MSE):", round(mse, 3))
print("Root Mean Squared Error (RMSE):", round(rmse, 3))
print("RÂ² Score:", round(r2, 3))

# ------------------------------
# 6. PREDICTION VISUALIZATION
# ------------------------------

plt.figure(figsize=(8, 6))
sns.scatterplot(x=y_test, y=y_pred, alpha=0.6)
plt.xlabel("Actual Values")
plt.ylabel("Predicted Values")
plt.title("Actual vs Predicted House Prices")
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red')  # Perfect prediction line
plt.tight_layout()
plt.show()
