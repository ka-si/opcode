import heapq

class Graph:
    def __init__(self):
        self.edges = {}

    def add_edge(self, node1, node2, cost):
        if node1 not in self.edges:
            self.edges[node1] = []
        if node2 not in self.edges:
            self.edges[node2] = []
        self.edges[node1].append((node2, cost))
        self.edges[node2].append((node1, cost))

def heuristic(node, goal):
    # Simple Euclidean distance heuristic
    x1, y1 = node
    x2, y2 = goal
    return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5

def a_star(graph, start, goal):
    open_list = [(0, start)]
    came_from = {}
    g_score = {start: 0}

    while open_list:
        current_cost, current_node = heapq.heappop(open_list)

        if current_node == goal:
            path = []
            while current_node in came_from:
                path.append(current_node)
                current_node = came_from[current_node]
            path.append(start)
            return path[::-1]

        for neighbor, cost in graph.edges[current_node]:
            tentative_g_score = g_score[current_node] + cost
            if neighbor not in g_score or tentative_g_score < g_score[neighbor]:
                came_from[neighbor] = current_node
                g_score[neighbor] = tentative_g_score
                f_score = tentative_g_score + heuristic(neighbor, goal)
                heapq.heappush(open_list, (f_score, neighbor))

    return None

def display_graph(graph):
    for node, neighbors in graph.edges.items():
        print(f"Node {node}: ", end='')
        for neighbor, cost in neighbors:
            print(f"({neighbor}, {cost})", end=' ')
        print()

def display_path(graph, path):
    print("Shortest path:")
    for i in range(len(path) - 1):
        current_node = path[i]
        next_node = path[i + 1]
        for neighbor, cost in graph.edges[current_node]:
            if neighbor == next_node:
                print(f"{current_node} -> {next_node} (cost: {cost})")

# Example usage:
g = Graph()
g.add_edge((0, 0), (1, 0), 1)
g.add_edge((1, 0), (1, 1), 1)
g.add_edge((1, 1), (2, 1), 1)
g.add_edge((2, 1), (2, 2), 1)
g.add_edge((2, 2), (3, 2), 1)
g.add_edge((3, 2), (3, 3), 1)
g.add_edge((3, 3), (4, 3), 1)

start = (0, 0)
goal = (4, 3)

print("Graph:")
display_graph(g)

path = a_star(g, start, goal)
if path:
    print("\nShortest path from", start, "to", goal, ":")
    display_path(g, path)
else:
    print("No path found from", start, "to", goal)
