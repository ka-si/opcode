To apply Autoregression on the monthly shampoo sales dataset, we'll follow these steps:

Steps to Implement Autoregression:
Download the Dataset: First, you need to download the shampoo sales dataset. It’s a common dataset often available in time series forecasting examples, where monthly sales of shampoo are recorded.

Save the Dataset: Save it as shampoo-sales.csv.

Load the Data: We will load the dataset using pandas and prepare it for analysis.

Apply Autoregression: Autoregression is a statistical model that uses the observations of previous time steps to predict future time steps. We'll apply the AR (AutoRegressive) model for time series prediction using the statsmodels library.

Download the Shampoo Sales Dataset:
If you don't have the dataset, here’s a typical dataset format (you can use it directly or find a similar one):

python-repl
Copy code
Month,Sales
1,266
2,145
3,183
4,119
5,180
6,211
7,188
8,163
9,148
10,182
11,202
12,199
...
For this example, let's assume the file is saved as shampoo-sales.csv.

Python Code to Apply Autoregression:
python
Copy code
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.ar_model import AutoReg
from statsmodels.tools.eval_measures import rmse

# Step 1: Load the dataset
df = pd.read_csv('shampoo-sales.csv', parse_dates=['Month'], index_col='Month')

# Step 2: Plot the original sales data
plt.figure(figsize=(10, 6))
df['Sales'].plot()
plt.title('Monthly Shampoo Sales')
plt.xlabel('Month')
plt.ylabel('Sales')
plt.show()

# Step 3: Split the dataset into training and test sets
train = df.iloc[:-12]  # Training data: All data except the last 12 months
test = df.iloc[-12:]   # Test data: The last 12 months (for validation)

# Step 4: Fit the Autoregression (AR) model
model = AutoReg(train['Sales'], lags=1)  # Using 1 lag for simplicity (you can try others)
model_fitted = model.fit()

# Step 5: Make predictions on the test set
predictions = model_fitted.predict(start=len(train), end=len(train) + len(test) - 1, dynamic=False)

# Step 6: Plot the predictions vs. actual values
plt.figure(figsize=(10, 6))
plt.plot(test.index, test['Sales'], label='Actual Sales', color='blue')
plt.plot(test.index, predictions, label='Predicted Sales', color='red')
plt.title('Autoregression: Actual vs Predicted Sales')
plt.xlabel('Month')
plt.ylabel('Sales')
plt.legend()
plt.show()

# Step 7: Evaluate the model performance using RMSE (Root Mean Squared Error)
error = rmse(test['Sales'], predictions)
print(f'Root Mean Squared Error (RMSE): {error}')
Explanation of the Code:
Loading the Dataset:

We load the dataset shampoo-sales.csv using pd.read_csv() with parse_dates=['Month'] and index_col='Month' to parse the month column as dates and set it as the index.

Plotting the Data:

We plot the original shampoo sales data to understand its trend over time.

Splitting the Data:

We split the dataset into training (everything except the last 12 months) and test (the last 12 months) data. This helps evaluate the performance of the model on unseen data.

Fitting the Autoregression Model:

We use the AutoReg function from statsmodels to fit an autoregressive model. We set lags=1 to use the previous month's sales to predict the next month's sales. You can try increasing the lags value to use more past observations.

The model.fit() function fits the model to the training data.

Making Predictions:

The model makes predictions on the test data using the model_fitted.predict() method.

Plotting Predictions:

We plot the actual sales and predicted sales for the last 12 months to visualize how well the model performs.

Evaluating the Model:

We compute the Root Mean Squared Error (RMSE) between the actual and predicted sales using the rmse() function from statsmodels.

Expected Output:
Plot of Monthly Shampoo Sales:

The first plot will show the trend of monthly sales over time.

Autoregression Predictions vs Actual Sales:

The second plot will compare the actual sales values with the predicted ones from the autoregressive model. If the model is effective, the predicted line should closely follow the actual sales line.

RMSE Value:

The RMSE value will be printed, which quantifies the error of the model. A lower RMSE indicates a better fit.

-------------------------------------------------------------------xxxx-------------------------------------------

COde  :

#Load and Visualize the Data
import pandas as pd
import matplotlib.pyplot as plt

# Load the dataset
df = pd.read_csv('shampoo-sales.csv', parse_dates=['Month'], index_col='Month')

# Plot the sales data
plt.figure(figsize=(10, 6))
plt.plot(df.index, df['Sales'], marker='o', color='b')
plt.title('Monthly Shampoo Sales')
plt.xlabel('Month')
plt.ylabel('Sales')
plt.grid(True)
plt.show()

#Apply Autoregressive (AR) Model
from statsmodels.tsa.ar_model import AutoReg

# Fit the AR model
model = AutoReg(df['Sales'], lags=1)
model_fitted = model.fit()

# Print the model summary
print(model_fitted.summary())

# Make predictions
predictions = model_fitted.predict(start=len(df), end=len(df)+11, dynamic=False)

# Plot the predictions
plt.figure(figsize=(10, 6))
plt.plot(df.index, df['Sales'], label='Historical Sales', color='b')
plt.plot(pd.date_range(df.index[-1], periods=12, freq='M'), predictions, label='Forecasted Sales', color='r', linestyle='--')
plt.title('Shampoo Sales Forecast')
plt.xlabel('Month')
plt.ylabel('Sales')
plt.legend()
plt.grid(True)
plt.show()


