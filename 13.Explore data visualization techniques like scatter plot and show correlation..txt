Exploring data visualization techniques like scatter plots and correlation analysis is an important part of Exploratory Data Analysis (EDA). These techniques help to uncover relationships between variables, identify trends, and detect outliers.

Let's break down the process for exploring scatter plots and correlations using a dataset (for example, the Automobile dataset).

Steps to Explore Scatter Plots and Correlation:
Scatter Plot:

A scatter plot is used to visualize the relationship between two continuous variables.

It helps in understanding trends, clusters, and possible outliers.

Correlation:

Correlation measures the relationship between two or more variables.

It helps in determining if variables have a linear relationship and the strength of that relationship.

We'll use seaborn and matplotlib to plot scatter plots and a correlation heatmap to show the relationship between different variables.

Python Code for Data Visualization (Scatter Plot & Correlation)
python
Copy code
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Step 1: Load the dataset
df = pd.read_csv('automobile.csv')  # Load the automobile dataset

# Step 2: Clean the dataset (Handling missing values, conversion to numerical data)
# Replace '?' with NaN
df.replace('?', np.nan, inplace=True)

# Convert columns to appropriate data types
df['price'] = pd.to_numeric(df['price'], errors='coerce')
df['horsepower'] = pd.to_numeric(df['horsepower'], errors='coerce')
df['curb-weight'] = pd.to_numeric(df['curb-weight'], errors='coerce')
df['engine-size'] = pd.to_numeric(df['engine-size'], errors='coerce')

# Fill missing numerical values with the mean (for simplicity)
df['price'].fillna(df['price'].mean(), inplace=True)
df['horsepower'].fillna(df['horsepower'].mean(), inplace=True)
df['curb-weight'].fillna(df['curb-weight'].mean(), inplace=True)
df['engine-size'].fillna(df['engine-size'].mean(), inplace=True)

# Step 3: Visualizing scatter plot
# Scatter plot to visualize relationship between engine-size and price
plt.figure(figsize=(10, 6))
sns.scatterplot(x='engine-size', y='price', data=df)
plt.title('Engine Size vs. Price')
plt.xlabel('Engine Size')
plt.ylabel('Price')
plt.show()

# Step 4: Correlation Heatmap
# Calculate correlation between numerical features
correlation_matrix = df[['price', 'horsepower', 'curb-weight', 'engine-size']].corr()

# Plot the correlation heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Heatmap')
plt.show()

# Step 5: Scatter Matrix (Pairplot) to explore relationships among multiple variables
sns.pairplot(df[['price', 'horsepower', 'curb-weight', 'engine-size']])
plt.title('Pair Plot of Numerical Features')
plt.show()
Explanation of the Code:
Load the Dataset:
The dataset is loaded using pd.read_csv('automobile.csv'). You can replace this with the path to your dataset.

Data Cleaning:

We replace missing values (represented as ?) with NaN and convert the necessary columns (like price, horsepower, etc.) to numeric values.

Missing values are filled using the mean of the respective columns.

Scatter Plot:

The scatter plot is generated to visualize the relationship between engine-size and price. We use sns.scatterplot() for this, which plots individual data points on the x-axis and y-axis.

The title, x-label, and y-label are added for clarity.

Correlation Heatmap:

We compute the correlation matrix using df.corr() to determine the correlation between numerical features like price, horsepower, curb-weight, and engine-size.

The heatmap is created using sns.heatmap(), which displays the correlation values on a color scale. Strong positive correlations are shown in darker colors, while negative correlations are lighter.

Pair Plot:

A pairplot (scatter matrix) is created using sns.pairplot(), which shows the relationships between all pairs of selected variables.

This plot is useful for seeing how features are related pairwise, and it also helps to identify trends, clusters, and possible outliers.

What the Visualizations Show:
Scatter Plot (Engine Size vs. Price):

This scatter plot will show how the price of the cars relates to the engine-size. Typically, we expect a positive correlation, meaning larger engine sizes often correlate with higher prices. However, the plot will also reveal any outliers.

Correlation Heatmap:

The correlation heatmap shows the strength of relationships between features. For example:

A high positive correlation (close to 1) between engine-size and curb-weight suggests that larger engines tend to be in heavier vehicles.

A moderate correlation between horsepower and price would show that cars with higher horsepower tend to be priced higher.

Pair Plot (Scatter Matrix):

The pair plot will show scatter plots of every feature against every other feature. It helps in identifying relationships and potential outliers across multiple features simultaneously. The diagonal line plots show the distribution of each feature.

Interpreting the Results:
Scatter Plot:

If we observe a clear upward trend (i.e., as engine-size increases, so does price), it indicates a positive correlation. Any data points that are far away from the main cluster of points may be considered outliers.

Correlation Heatmap:

Correlation values close to 1 indicate a strong positive linear relationship, while values close to -1 indicate a strong negative relationship. Values around 0 suggest little to no linear relationship.

Pair Plot:

The pair plot will show more detailed relationships, helping to identify strong linear or non-linear relationships and potential outliers.

---------------------------------------------xxx------------------------------------------------------

Code :

# Import necessary libraries
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# ------------------------------
# 1. LOAD THE AUTOMOBILE DATASET
# ------------------------------

# Load the dataset (replace 'path/to/your/automobile.csv' with the actual path)
file_path = 'path/to/your/automobile.csv'  # Replace with your actual file path
df = pd.read_csv(file_path)

# Display the first few rows of the dataset
print("First 5 rows of the dataset:")
print(df.head())

# ------------------------------
# 2. SCATTER PLOT: Visualize Relationships Between Two Variables
# ------------------------------

# Scatter plot between 'horsepower' and 'price'
plt.figure(figsize=(8, 6))
sns.scatterplot(data=df, x='horsepower', y='price', color='green')
plt.title('Horsepower vs Price')
plt.xlabel('Horsepower')
plt.ylabel('Price')
plt.tight_layout()
plt.show()

# Scatter plot between 'curb-weight' and 'price'
plt.figure(figsize=(8, 6))
sns.scatterplot(data=df, x='curb-weight', y='price', color='blue')
plt.title('Curb Weight vs Price')
plt.xlabel('Curb Weight')
plt.ylabel('Price')
plt.tight_layout()
plt.show()

# ------------------------------
# 3. CORRELATION ANALYSIS: Visualizing Correlation Matrix
# ------------------------------

# Calculate correlation matrix
correlation_matrix = df.corr()

# Display the correlation matrix
print("\nCorrelation Matrix:")
print(correlation_matrix)

# Plot the heatmap for correlation
plt.figure(figsize=(10, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=1)
plt.title('Correlation Heatmap of Numerical Features')
plt.tight_layout()
plt.show()
